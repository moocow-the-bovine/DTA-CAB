## -*- Mode: CPerl -*-
##
## File: DTA::CAB::Analyzer::ExLex.pm
## Author: Bryan Jurish <jurish@uni-potsdam.de>
## Description: DTA exception lexicon: symboluic wrapper

##==============================================================================
## Package: ExLex
##==============================================================================
package DTA::CAB::Analyzer::ExLex;
use DTA::CAB::Analyzer ':child';
use Carp;
use strict;

#use DTA::CAB::Analyzer::ExLex::BDB;
#our @ISA = qw(DTA::CAB::Analyzer::ExLex::BDB);
##
use DTA::CAB::Analyzer::ExLex::CDB;
our @ISA = qw(DTA::CAB::Analyzer::ExLex::CDB);


1; ##-- be happy

__END__

##========================================================================
## POD DOCUMENTATION, auto-generated by podextract.perl, edited
=pod

=cut

##========================================================================
## NAME
=pod

=head1 NAME

DTA::CAB::Analyzer::ExLex - DTA exception type-wise exception lexicon

=cut

##========================================================================
## SYNOPSIS
=pod

=head1 SYNOPSIS

 use DTA::CAB::Analyzer::ExLex;
 
 $exlex = DTA::CAB::Analyzer::ExLex->new(%args);

=cut

##========================================================================
## DESCRIPTION
=pod

=head1 DESCRIPTION

DTA::CAB::Analyzer::ExLex
is a just a wrapper for a type-wise exception lexicon
which sets the following default options:

 label => 'exlex',                   ##-- analysis label
 typeKeys => [qw(exlex pnd errid)]   ##-- type-wise analysis keys

=cut

##========================================================================
## END POD DOCUMENTATION, auto-generated by podextract.perl

##======================================================================
## Footer
##======================================================================

=pod

=head1 AUTHOR

Bryan Jurish E<lt>jurish@bbaw.deE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011 by Bryan Jurish

This package is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.

=cut


=cut
